import networkx as nx

def pagerank(G, alpha=0.85, personalization=None, max_iter=100, tol=1.0e-6, nstart=None, weight='weight', dangling=None):
    if len(G) == 0:
        return {}
    
    if not G.is_directed():
        D = G.to_directed()
    else:
        D = G

    W = nx.stochastic_graph(D, weight=weight)
    N = W.number_of_nodes()

    if nstart is None:
        x = dict.fromkeys(W, 1.0 / N)
    else:
        s = float(sum(nstart.values()))
        x = {k: v / s for k, v in nstart.items()}

    if personalization is None:
        p = dict.fromkeys(W, 1.0 / N)
    else:
        missing = set(G) - set(personalization)
        if missing:
            raise nx.NetworkXError(f'Personalization dictionary must have a value for every node. Missing nodes {missing}')
        s = float(sum(personalization.values()))
        p = {k: v / s for k, v in personalization.items()}

    if dangling is None:
        dangling_weights = p
    else:
        missing = set(G) - set(dangling)
        if missing:
            raise nx.NetworkXError(f'Dangling node dictionary must have a value for every node. Missing nodes {missing}')
        s = float(sum(dangling.values()))
        dangling_weights = {k: v / s for k, v in dangling.items()}

    dangling_nodes = [n for n in W if W.out_degree(n, weight=weight) == 0.0]

    for _ in range(max_iter):
        xlast = x
        x = dict.fromkeys(xlast.keys(), 0)
        danglesum = alpha * sum(xlast[n] for n in dangling_nodes)

        for n in x:
            for nbr in W[n]:
                x[nbr] += alpha * xlast[n] * W[n][nbr][weight]
            x[n] += danglesum * dangling_weights[n] + (1.0 - alpha) * p[n]

        err = sum([abs(x[n] - xlast[n]) for n in x])
        if err < N * tol:
            return x

    raise nx.NetworkXError(f'pagerank: power iteration failed to converge in {max_iter} iterations.')

G = nx.DiGraph()
edges = [
    (1, 4), (1, 7), (1, 4),
    (2, 6), (2, 5),
    (3, 1), (3, 8), (3, 7),
    (4, 2), (4, 4),
    (5, 1), (5, 4),
    (6, 5), (6, 10),
    (7, 4),
    (8, 7),
    (9, 12), (10, 13)
]
G.add_edges_from(edges)

pagerank_results = pagerank(G)

print("PageRank Results:")
for node, rank in sorted(pagerank_results.items()):
    print(f"Node {node}: {rank:.4f}")
